generator client {
    provider = "prisma-client-js"
}

datasource mydb {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("DATABASE_TMP_URL")
}

enum UserRole {
    ADMIN
    USER
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @mydb.Text
    access_token             String? @mydb.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @mydb.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "account")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          UserRole  @default(USER)
    use2FA        Boolean   @default(false)

    // sessions      Session[]
    accounts  Account[]
    factorTwo FactorTwo2User?
    // authenticators Authenticator[]

    @@map(name: "user")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    // user User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@map(name: "session")
}

// used by E-Mail Provider, only.
model VerifyToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
    @@map(name: "verifytoken")
}

// used if 2FA enab√∂ed
model FactorTwoToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
    @@map(name: "factortwotoken")
}

// map 2FA tokens to user and vice versa
model FactorTwo2User {
    id     String @id @default(cuid())
    userId String @unique

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "factortwo2user")
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
    @@map(name: "authenticator")
}
